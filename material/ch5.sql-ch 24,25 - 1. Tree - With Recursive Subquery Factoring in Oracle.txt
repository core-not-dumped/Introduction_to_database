-- Copyright(c) SKKU VLDB Lab. & SOS 2016. All Rights Reserved.

-- This sample comes from the following URL.
-- https://oracle-base.com/articles/11g/recursive-subquery-factoring-11gr2

DROP TABLE parent PURGE;

CREATE TABLE parent (
  id        NUMBER,
  parent_id NUMBER,
  CONSTRAINT tab1_pk PRIMARY KEY (id),
  CONSTRAINT tab1_tab1_fk FOREIGN KEY (parent_id) REFERENCES parent(id)
);

CREATE INDEX parent_id_idx ON parent(parent_id);

INSERT INTO parent VALUES (1, NULL);
INSERT INTO parent VALUES (2, 1);
INSERT INTO parent VALUES (3, 2);
INSERT INTO parent VALUES (4, 2);
INSERT INTO parent VALUES (5, 4);
INSERT INTO parent VALUES (6, 4);
INSERT INTO parent VALUES (7, 1);
INSERT INTO parent VALUES (8, 7);
INSERT INTO parent VALUES (9, 1);
INSERT INTO parent VALUES (10, 9);
INSERT INTO parent VALUES (11, 10);
INSERT INTO parent VALUES (12, 9);
COMMIT;

SET PAGESIZE 20 LINESIZE 110

--============================================================================
-- A recursive subquery factoring clause must contain two query blocks 
-- combined by a UNION ALL set operator. The first block is known as 
-- the anchor member, which can not reference the query name. It can be 
-- made up of one or more query blocks combined by the UNION ALL, UNION, 
-- INTERSECT or MINUS set operators. The second query block is known as 
-- the recursive member, which must reference the query name once.
--
-- The following query uses a recursive WITH clause to perform a tree walk. 
-- The anchor member queries the root nodes by testing for records with 
-- no parents. The recursive member successively adds the children to the 
-- root nodes.
--============================================================================

WITH ancestor(id, ancestor_id) AS (
  -- Anchor member.
  SELECT id, parent_id
  FROM   parent
  UNION ALL
  -- Recursive member.
  SELECT p.id , a.ancestor_id
  FROM   parent p, ancestor a
  WHERE  p.parent_id = a.id
)
SELECT id,
       ancestor_id
FROM   ancestor
where ancestor_id is not null;

--Result: ?

-- Can we prune node or branch? How?

--=============================================================================
-- The ordering of the rows is specified using either two SEARCH clauses
-- 1. BREADTH FIRST BY : Sibling rows are returned before child rows 
--    are processed.
-- 2. DEPTH FIRST BY : Child rows are returned before siblings are processed.
--============================================================================

WITH ancestor (id, ancestor_id) AS (
	..
)
SEARCH BREADTH FIRST BY id SET order1 
--or, SEARCH DEPTH FIRST BY id SET order1
SELECT id,
       parent_id
FROM   ancestor 
ORDER BY order1;

Practice
1. Write recursive SQL which deduces all direct or indirect supervisor-subordinate pair 
   (i.e., super_id, super_name, sub_id, sub_name) from emp table. 

WITH supersub(super_id, super_name, sub_id, sub_name) AS (
  -- Anchor member.
  SELECT (fill by your self)
  FROM   emp e1, emp e2
  where e1.empno = e2.mgr 
  UNION ALL
  -- Recursive member.
  SELECT (fill by yourself) 
  FROM   supersub s1, emp s2
  WHERE  s1.sub_id = s2.mgr
)
SELECT * 
FROM   supersub
order by super_id

2. Write recursive SQL which retrieve the names of all direct or indirect subordinates of JONES in Emp table. 

3. Write recursive SQL which retrieve the names of all direct or indirect supervisors of Smith in Emp table. 

